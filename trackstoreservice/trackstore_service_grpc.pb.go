// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trackstoreservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackStoreServiceClient is the client API for TrackStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackStoreServiceClient interface {
	GetFlightList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FlightList, error)
	GetFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*Flight, error)
}

type trackStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackStoreServiceClient(cc grpc.ClientConnInterface) TrackStoreServiceClient {
	return &trackStoreServiceClient{cc}
}

func (c *trackStoreServiceClient) GetFlightList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FlightList, error) {
	out := new(FlightList)
	err := c.cc.Invoke(ctx, "/trackStoreService.TrackStoreService/GetFlightList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackStoreServiceClient) GetFlight(ctx context.Context, in *FlightRequest, opts ...grpc.CallOption) (*Flight, error) {
	out := new(Flight)
	err := c.cc.Invoke(ctx, "/trackStoreService.TrackStoreService/GetFlight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackStoreServiceServer is the server API for TrackStoreService service.
// All implementations must embed UnimplementedTrackStoreServiceServer
// for forward compatibility
type TrackStoreServiceServer interface {
	GetFlightList(context.Context, *emptypb.Empty) (*FlightList, error)
	GetFlight(context.Context, *FlightRequest) (*Flight, error)
	mustEmbedUnimplementedTrackStoreServiceServer()
}

// UnimplementedTrackStoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackStoreServiceServer struct {
}

func (UnimplementedTrackStoreServiceServer) GetFlightList(context.Context, *emptypb.Empty) (*FlightList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightList not implemented")
}
func (UnimplementedTrackStoreServiceServer) GetFlight(context.Context, *FlightRequest) (*Flight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlight not implemented")
}
func (UnimplementedTrackStoreServiceServer) mustEmbedUnimplementedTrackStoreServiceServer() {}

// UnsafeTrackStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackStoreServiceServer will
// result in compilation errors.
type UnsafeTrackStoreServiceServer interface {
	mustEmbedUnimplementedTrackStoreServiceServer()
}

func RegisterTrackStoreServiceServer(s grpc.ServiceRegistrar, srv TrackStoreServiceServer) {
	s.RegisterService(&TrackStoreService_ServiceDesc, srv)
}

func _TrackStoreService_GetFlightList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackStoreServiceServer).GetFlightList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trackStoreService.TrackStoreService/GetFlightList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackStoreServiceServer).GetFlightList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackStoreService_GetFlight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackStoreServiceServer).GetFlight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trackStoreService.TrackStoreService/GetFlight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackStoreServiceServer).GetFlight(ctx, req.(*FlightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackStoreService_ServiceDesc is the grpc.ServiceDesc for TrackStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trackStoreService.TrackStoreService",
	HandlerType: (*TrackStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlightList",
			Handler:    _TrackStoreService_GetFlightList_Handler,
		},
		{
			MethodName: "GetFlight",
			Handler:    _TrackStoreService_GetFlight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trackstore_service.proto",
}
